<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cool Notion Widgets</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', system-ui, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }
        
        .container {
            max-width: 800px;
            width: 100%;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            text-align: center;
            margin: 20px 0 30px;
            font-size: 2.5rem;
            text-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        
        .widget-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .widget {
            background: white;
            border-radius: 16px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .widget:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }
        
        .widget-title {
            font-size: 1.2rem;
            margin-bottom: 15px;
            color: #4a5568;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        /* Progress Tracker Styles */
        .progress-container {
            margin: 15px 0;
        }
        
        .progress-bar {
            height: 20px;
            background: #e2e8f0;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 8px;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
            border-radius: 10px;
            transition: width 0.5s ease;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding-right: 10px;
            color: white;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .progress-text {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            color: #718096;
        }
        
        /* Countdown Timer Styles */
        .countdown-container {
            text-align: center;
            padding: 10px 0;
        }
        
        #countdown {
            font-size: 1.8rem;
            font-weight: bold;
            color: #2d3748;
            margin: 15px 0;
        }
        
        .countdown-label {
            font-size: 1rem;
            color: #718096;
        }
        
        /* Pomodoro Timer Styles */
        .pomodoro-container {
            text-align: center;
        }
        
        .timer-display {
            font-size: 3rem;
            font-weight: bold;
            color: #2d3748;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }
        
        .timer-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
        }
        
        button {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            background: #4a5568;
            color: white;
            cursor: pointer;
            transition: background 0.3s ease;
            font-weight: 500;
        }
        
        button:hover {
            background: #2d3748;
        }
        
        button.start {
            background: #48bb78;
        }
        
        button.start:hover {
            background: #38a169;
        }
        
        button.reset {
            background: #f56565;
        }
        
        button.reset:hover {
            background: #e53e3e;
        }
        
        /* Task List Styles */
        .task-input {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
        }
        
        .task-list {
            list-style: none;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 0;
            border-bottom: 1px solid #f1f1f1;
        }
        
        .task-item:last-child {
            border-bottom: none;
        }
        
        .task-checkbox {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #cbd5e0;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .task-checkbox.checked {
            background: #48bb78;
            border-color: #48bb78;
            color: white;
        }
        
        .task-text {
            flex: 1;
        }
        
        .task-text.completed {
            text-decoration: line-through;
            color: #a0aec0;
        }
        
        .delete-task {
            color: #f56565;
            cursor: pointer;
            font-weight: bold;
        }
        
        /* Notes Widget Styles */
        .notes-container textarea {
            width: 100%;
            height: 150px;
            padding: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            resize: vertical;
            margin-bottom: 10px;
        }
        
        .notes-stats {
            display: flex;
            justify-content: space-between;
            color: #718096;
            font-size: 0.9rem;
        }
        
        /* Instructions */
        .instructions {
            background: white;
            border-radius: 16px;
            padding: 25px;
            margin-top: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }
        
        .instructions h2 {
            margin-bottom: 15px;
            color: #4a5568;
        }
        
        .instructions ol {
            margin-left: 20px;
            line-height: 1.6;
        }
        
        .instructions li {
            margin-bottom: 10px;
        }
        
        .instructions code {
            background: #f7fafc;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: monospace;
            border: 1px solid #e2e8f0;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .widget-grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ú® Cool Notion Widgets</h1>
        
        <div class="widget-grid">
            <!-- Progress Tracker Widget -->
            <div class="widget">
                <h2 class="widget-title">üìä Progress Tracker</h2>
                <div class="progress-container">
                    <div class="progress-text">
                        <span>Project Completion</span>
                        <span id="progress-percent">65%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill" style="width: 65%">65%</div>
                    </div>
                </div>
                <div class="progress-container">
                    <div class="progress-text">
                        <span>Weekly Goals</span>
                        <span id="goals-percent">80%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="goals-fill" style="width: 80%; background: linear-gradient(90deg, #4299e1, #63b3ed)">80%</div>
                    </div>
                </div>
            </div>
            
            <!-- Countdown Timer Widget -->
            <div class="widget">
                <h2 class="widget-title">‚è∞ Countdown Timer</h2>
                <div class="countdown-container">
                    <div class="countdown-label">Days until New Year:</div>
                    <div id="countdown">Loading...</div>
                </div>
            </div>
            
            <!-- Pomodoro Timer Widget -->
            <div class="widget">
                <h2 class="widget-title">üçÖ Pomodoro Timer</h2>
                <div class="pomodoro-container">
                    <div class="timer-display" id="pomodoro-timer">25:00</div>
                    <div class="timer-controls">
                        <button class="start" id="start-pomodoro">Start</button>
                        <button id="pause-pomodoro">Pause</button>
                        <button class="reset" id="reset-pomodoro">Reset</button>
                    </div>
                    <div style="margin-top: 15px; font-size: 0.9rem; color: #718096;">
                        Focus for 25 minutes, then take a 5-minute break
                    </div>
                </div>
            </div>
            
            <!-- Task List Widget -->
            <div class="widget">
                <h2 class="widget-title">‚úÖ Task List</h2>
                <div class="task-input">
                    <input type="text" id="task-input" placeholder="Add a new task...">
                    <button id="add-task">Add</button>
                </div>
                <ul class="task-list" id="task-list">
                    <!-- Tasks will be added here dynamically -->
                </ul>
            </div>
            
            <!-- Quick Notes Widget -->
            <div class="widget">
                <h2 class="widget-title">üìù Quick Notes</h2>
                <div class="notes-container">
                    <textarea id="notes-text" placeholder="Type your notes here..."></textarea>
                    <div class="notes-stats">
                        <span id="notes-count">0 characters</span>
                        <span id="notes-saved">Auto-saved</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Instructions -->
        <div class="instructions">
            <h2>How to Use These Widgets in Notion</h2>
            <ol>
                <li>Copy the entire code from this page</li>
                <li>In Notion, create a new page or go to an existing one</li>
                <li>Type <code>/embed</code> and select the Embed block</li>
                <li>Paste the code and click "Embed"</li>
                <li>Resize the embed block to fit your widgets</li>
                <li>Alternatively, you can save this as an HTML file and upload it</li>
            </ol>
            <p><strong>Note:</strong> Some interactive features might be limited in the Notion embed environment.</p>
        </div>
    </div>

    <script>
        // Progress Tracker - Make it interactive
        document.addEventListener('DOMContentLoaded', function() {
            const progressFill = document.getElementById('progress-fill');
            const progressPercent = document.getElementById('progress-percent');
            
            // Simulate progress update (you can replace this with real data)
            setTimeout(() => {
                progressFill.style.width = '75%';
                progressFill.textContent = '75%';
                progressPercent.textContent = '75%';
            }, 2000);
        });
        
        // Countdown Timer
        function updateCountdown() {
            const eventDate = new Date('December 31, 2024 23:59:59').getTime();
            const now = new Date().getTime();
            const distance = eventDate - now;
            
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            
            document.getElementById('countdown').innerHTML = 
                `${days} days <span style="font-size: 1rem;">üéâ</span>`;
        }
        
        setInterval(updateCountdown, 1000);
        updateCountdown();
        
        // Pomodoro Timer
        let pomodoroTime = 25 * 60; // 25 minutes in seconds
        let pomodoroInterval;
        let isRunning = false;
        
        const pomodoroDisplay = document.getElementById('pomodoro-timer');
        const startButton = document.getElementById('start-pomodoro');
        const pauseButton = document.getElementById('pause-pomodoro');
        const resetButton = document.getElementById('reset-pomodoro');
        
        function updatePomodoroDisplay() {
            const minutes = Math.floor(pomodoroTime / 60);
            const seconds = pomodoroTime % 60;
            pomodoroDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        function startPomodoro() {
            if (isRunning) return;
            
            isRunning = true;
            pomodoroInterval = setInterval(() => {
                if (pomodoroTime > 0) {
                    pomodoroTime--;
                    updatePomodoroDisplay();
                } else {
                    clearInterval(pomodoroInterval);
                    isRunning = false;
                    alert('Pomodoro session complete! Take a 5-minute break.');
                    // Reset to 25 minutes for next session
                    pomodoroTime = 25 * 60;
                    updatePomodoroDisplay();
                }
            }, 1000);
        }
        
        function pausePomodoro() {
            clearInterval(pomodoroInterval);
            isRunning = false;
        }
        
        function resetPomodoro() {
            clearInterval(pomodoroInterval);
            isRunning = false;
            pomodoroTime = 25 * 60;
            updatePomodoroDisplay();
        }
        
        startButton.addEventListener('click', startPomodoro);
        pauseButton.addEventListener('click', pausePomodoro);
        resetButton.addEventListener('click', resetPomodoro);
        
        updatePomodoroDisplay();
        
        // Task List
        const taskInput = document.getElementById('task-input');
        const addTaskButton = document.getElementById('add-task');
        const taskList = document.getElementById('task-list');
        
        function addTask() {
            const taskText = taskInput.value.trim();
            if (taskText === '') return;
            
            const taskItem = document.createElement('li');
            taskItem.className = 'task-item';
            
            taskItem.innerHTML = `
                <div class="task-checkbox"></div>
                <div class="task-text">${taskText}</div>
                <div class="delete-task">√ó</div>
            `;
            
            taskList.appendChild(taskItem);
            taskInput.value = '';
            
            // Add event listeners to new task
            const checkbox = taskItem.querySelector('.task-checkbox');
            const taskTextElement = taskItem.querySelector('.task-text');
            const deleteButton = taskItem.querySelector('.delete-task');
            
            checkbox.addEventListener('click', function() {
                checkbox.classList.toggle('checked');
                taskTextElement.classList.toggle('completed');
                
                if (checkbox.classList.contains('checked')) {
                    checkbox.innerHTML = '‚úì';
                } else {
                    checkbox.innerHTML = '';
                }
            });
            
            deleteButton.addEventListener('click', function() {
                taskList.removeChild(taskItem);
            });
        }
        
        addTaskButton.addEventListener('click', addTask);
        
        taskInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTask();
            }
        });
        
        // Add some sample tasks
        const sampleTasks = ['Complete project proposal', 'Review meeting notes', 'Schedule team call'];
        sampleTasks.forEach(task => {
            taskInput.value = task;
            addTask();
        });
        
        // Quick Notes
        const notesText = document.getElementById('notes-text');
        const notesCount = document.getElementById('notes-count');
        const notesSaved = document.getElementById('notes-saved');
        
        notesText.addEventListener('input', function() {
            const count = notesText.value.length;
            notesCount.textContent = `${count} characters`;
            
            // Show "Saving..." temporarily
            notesSaved.textContent = 'Saving...';
            setTimeout(() => {
                notesSaved.textContent = 'Auto-saved';
            }, 1000);
            
            // In a real app, you would save to localStorage here
            // localStorage.setItem('notion-notes', notesText.value);
        });
        
        // Load saved notes (commented out for Notion embed)
        // if (localStorage.getItem('notion-notes')) {
        //     notesText.value = localStorage.getItem('notion-notes');
        //     notesCount.textContent = `${notesText.value.length} characters`;
        // }
    </script>
</body>
</html>
